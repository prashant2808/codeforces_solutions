/*===== TABULATION ====*/
import java.util.*;
import java.io.*;
 public  class coins{
 
    public static void main(String[] args) {
        Scanner sc= new Scanner(System.in);
        int n=sc.nextInt();
        int a=sc.nextInt();
        int b=sc.nextInt();
        int c=sc.nextInt();
        int [] dp= new int [n+1];
        Arrays.fill(dp,-1000000007);
        dp[0]=0;
         for(int i=1;i<=n;i++){
 
             if(i>=a){
                 dp[i]=Math.max(dp[i],dp[i-a]+1);
             }
             if(i>=b){
                 dp[i]=Math.max(dp[i],dp[i-b]+1);
             }
             if(i>=c){
                 dp[i]=Math.max(dp[i],dp[i-c]+1);
             }
         }
 
        System.out.println(dp[n]);
 
 
    }
 
}
/*=========RECURSION WITH MEMOIZATION ========*/
import java.util.*;
import java.io.*;
public class coins{
 
    public static void main(String[] args) {
        Scanner sc= new Scanner(System.in);
        int n=sc.nextInt();
        int a=sc.nextInt();
        int b=sc.nextInt();
        int c=sc.nextInt();
        int dp[]= new int [n+1];
        Arrays.fill(dp,-1);
         int ans=recurse(n,a,b,c,dp);
        System.out.println(ans);
 
 
    }
   static int recurse(int n,int a ,int b,int c,int [] dp){
        if(n<0)return -1000000007;
        if(n==0){
            return 0;
        }
        if(dp[n]!=-1)return dp[n];
        return dp[n]= 1+ Math.max(recurse(n-a,a,b,c,dp),Math.max(recurse(n-b,a,b,c,dp),recurse(n-c,a,b,c,dp)));
    }
 
}
