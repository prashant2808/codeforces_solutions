<-----TABULATION O(N*x)------->
  #include <iostream>
#include <vector>
 
 
using namespace std;
 
  
 
int main() {
    int n,x;
    cin>>n>>x;
   vector<int> price(n);
   vector<int> pages(n);
   for(int i=0;i<n;i++){
    cin>>price[i];
   }
   for(int i=0;i<n;i++){
    cin>>pages[i];
   }
   vector<vector<int>> dp(n+1,vector<int> (x+1,0));
    for(int i=0;i<=x;i++)dp[0][i]=0;
   for(int i=1;i<=n;i++){
    for(int j=1;j<=x;j++){
        dp[i][j]=dp[i-1][j];
        if(price[i-1]<=j)
        dp[i][j]=max(dp[i][j],dp[i-1][j-price[i-1]]+pages[i-1]);
    }
   }
     
    cout <<dp[n][x]<< endl;
 
    return 0;
    
}


<-----SPACE OPTIMIZATION O(X)------>
  
#include <iostream>
#include <vector>
 
 
using namespace std;
 
  
 
int main() {
    int n,x;
    cin>>n>>x;
   vector<int> price(n);
   vector<int> pages(n);
   for(int i=0;i<n;i++){
    cin>>price[i];
   }
   for(int i=0;i<n;i++){
    cin>>pages[i];
   }
    
   vector<int> pre_dp(x+1,0);
    pre_dp[0]=0;
   for(int i=1;i<=n;i++){
    vector<int> curr_dp(x+1,0);
    for(int j=1;j<=x;j++){
        curr_dp[j]=pre_dp[j];
        if(price[i-1]<=j)
        curr_dp[j]=max(curr_dp[j],pre_dp[j-price[i-1]]+pages[i-1]);
    }
    pre_dp=curr_dp;
   }
     
    cout <<pre_dp[x]<< endl;
 
    return 0;
    
}
